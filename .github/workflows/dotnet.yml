name: SonarCloud Analysis (Flattened Coverage Path)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  analysis:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Install SonarCloud scanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Begin SonarCloud analysis
        run: |
          dotnet-sonarscanner begin \
            /k:"varunusstaffing043-sketch_.net-test-" \
            /o:"varunusstaffing043-sketch" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths="TestResults/coverage.opencover.xml" \
            /d:sonar.cs.coveragecobertura.reportPaths="TestResults/coverage.cobertura.xml"

      - name: Restore dependencies
        run: dotnet restore TodoApi.sln

      - name: Build solution
        run: dotnet build TodoApi.sln --no-restore

      - name: Run tests with coverage (OpenCover)
        run: |
          dotnet test tests/TodoApi.Tests/TodoApi.Tests.csproj --no-build \
            /p:CollectCoverage=true \
            /p:CoverletOutput=TestResults/coverage.opencover.xml \
            /p:CoverletOutputFormat=opencover \
            /p:CoverletOutputDir=TestResults

      - name: Run tests with coverage (Cobertura)
        run: |
          dotnet test tests/TodoApi.Tests/TodoApi.Tests.csproj --no-build \
            /p:CollectCoverage=true \
            /p:CoverletOutput=TestResults/coverage.cobertura.xml \
            /p:CoverletOutputFormat=cobertura \
            /p:CoverletOutputDir=TestResults

      - name: Show TestResults directory
        run: ls -R TestResults || true

      - name: List coverage files
        run: find . -type f -name 'coverage*' -print || true

      - name: End SonarCloud analysis
        run: |
          dotnet-sonarscanner end \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
